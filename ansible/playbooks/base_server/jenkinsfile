pipeline {
    agent any
    stages {
        stage("Fetch Hostnames") {
            steps {
                script {
                    sshagent (credentials: ['jenkins-key']) {
                        // Fetch all hostnames using sudo qm list and extract just the hostname column
                        def hostnames = sh(script: "ssh -o StrictHostKeyChecking=no -l jenkins chrysler 'sudo qm list | grep -v NAME | awk \"{print \\\$2}\"'", returnStdout: true).trim().tokenize('\n')
                        echo "Hostnames: ${hostnames}"

                        // Create a dropdown for hostname selection
                        selectedHostname = input(message: 'Select a hostname:', parameters: [choice(name: 'Hostname', choices: hostnames.join('\n'), description: 'Choose a hostname')])


                    }
                }
            }
        }
        stage("Fetch Playbooks") {
            steps {
                script {
                    sshagent (credentials: ['jenkins-key']) {
                        //Clone the ansible folder from the homelab-ai repo
                        sh "git clone https://github.com/gabepsilva/homelab-ai.git"

                        // Build a list of all files ending in _playbook.yml
                        def playbooks = sh(script: "find . -name \"*_playbook.yml\"", returnStdout: true).trim().tokenize('\n')
                        echo "Playbooks: ${playbooks}"

                        // Define selectedPlaybook as a global variable
                        def selectedPlaybook = input(message: 'Select a playbook to apply:', parameters: [choice(name: 'Playbook', choices: playbooks.join('\n'), description: 'Choose a playbook')])
                        echo "WORKSPACE: ${WORKSPACE}"
                        sh 'pwd'
                        sh "ANSIBLE_CONFIG=homelab-ai/ansible/ansible.cfg ansible-playbook ${selectedPlaybook} -i homelab-ai/ansible/inventory.yml"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                echo "Performing cleanup actions..."
                // Navigate to the root $WORKSPACE
                sh "cd $WORKSPACE"
                // Example cleanup command
                sh "rm -rf *"
                sh "find . -name \".*\" -type f -exec rm -f {} +"
            }
        }
    }
}