---
# MetalLB test playbook
- name: Test MetalLB LoadBalancer functionality
  hosts: kubernetes_master_nodes
  gather_facts: yes
  tasks:
    - name: Verify MetalLB installation
      block:
        - name: Check MetalLB namespace exists
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl get namespace metallb-system
          register: metallb_namespace
          changed_when: false
          failed_when: metallb_namespace.rc != 0
          become: yes

        - name: Check MetalLB controller and speaker pods are running
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl get pods -n metallb-system
          register: metallb_pods
          changed_when: false
          become: yes

        - name: Verify IPAddressPool is configured
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl get ipaddresspool -n metallb-system first-pool -o jsonpath='{.spec.addresses}'
          register: metallb_ip_pool
          changed_when: false
          become: yes

        - name: Display MetalLB components status
          debug:
            msg: |
              MetalLB namespace: Present
              MetalLB pods: 
              {{ metallb_pods.stdout_lines }}
              IP Address Pool: {{ metallb_ip_pool.stdout }}

    - name: Test LoadBalancer service functionality
      block:
        - name: Create test namespace
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl create namespace metallb-test
          register: test_namespace
          changed_when: false
          failed_when: test_namespace.rc != 0 and "AlreadyExists" not in test_namespace.stderr
          become: yes

        - name: Deploy test nginx application
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            cat <<EOF | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: nginx-test
              namespace: metallb-test
            spec:
              selector:
                matchLabels:
                  app: nginx-test
              replicas: 1
              template:
                metadata:
                  labels:
                    app: nginx-test
                spec:
                  containers:
                  - name: nginx
                    image: nginx:stable
                    ports:
                    - containerPort: 80
            EOF
          register: nginx_deployment
          changed_when: false
          become: yes

        - name: Create LoadBalancer service for nginx
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: nginx-lb
              namespace: metallb-test
            spec:
              type: LoadBalancer
              ports:
              - port: 80
                targetPort: 80
              selector:
                app: nginx-test
            EOF
          register: lb_service
          changed_when: false
          become: yes

        - name: Wait for deployment to be ready
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl wait --namespace=metallb-test --for=condition=available deployment/nginx-test --timeout=60s
          register: nginx_ready
          changed_when: false
          ignore_errors: yes
          become: yes

        - name: Get LoadBalancer External IP
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl get service nginx-lb -n metallb-test -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          register: lb_ip
          changed_when: false
          ignore_errors: yes
          become: yes
          until: lb_ip.stdout != ""
          retries: 12
          delay: 5
          when: nginx_ready is succeeded

        - name: Test connection to LoadBalancer IP
          shell: |
            curl -s --connect-timeout 5 http://{{ lb_ip.stdout }}
          register: curl_result
          changed_when: false
          ignore_errors: yes
          become: yes
          when: nginx_ready is succeeded and lb_ip.stdout != ""

        - name: Verify LoadBalancer IP is from configured pool
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            POOL_RANGES="{{ metallb_ip_pool.stdout }}"
            LB_IP="{{ lb_ip.stdout }}"
            
            python3 <<EOF
            import sys
            import ipaddress
            
            lb_ip = "$LB_IP"
            pool_str = "$POOL_RANGES".replace('[', '').replace(']', '').replace('"', '')
            
            in_pool = False
            for pool_range in pool_str.split(','):
                pool_range = pool_range.strip()
                if '-' in pool_range:
                    start, end = pool_range.split('-')
                    start_ip = ipaddress.IPv4Address(start.strip())
                    end_ip = ipaddress.IPv4Address(end.strip())
                    
                    if ipaddress.IPv4Address(lb_ip) >= start_ip and ipaddress.IPv4Address(lb_ip) <= end_ip:
                        print("IP is in configured pool")
                        sys.exit(0)
            
            print("IP is NOT in configured pool")
            sys.exit(1)
            EOF
          register: ip_in_pool
          changed_when: false
          ignore_errors: yes
          become: yes
          when: nginx_ready is succeeded and lb_ip.stdout != ""

        - name: Display MetalLB test results
          debug:
            msg: |
              LoadBalancer IP assigned: {{ lb_ip.stdout if lb_ip.stdout != "" else "Failed to get IP" }}
              Connection to LoadBalancer: {{ "Successful" if curl_result.rc == 0 else "Failed" }}
              HTTP Response: 
              {{ curl_result.stdout_lines | default(["No response"]) }}
              IP from configured pool: {{ "Yes" if ip_in_pool is succeeded else "No" }}
          when: nginx_ready is succeeded

        - name: Cleanup test resources
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl delete namespace metallb-test
          register: test_cleanup
          changed_when: false
          ignore_errors: yes
          become: yes

    - name: Test multiple LoadBalancer services
      block:
        - name: Create another test namespace
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl create namespace metallb-multi-test
          register: multi_test_namespace
          changed_when: false
          failed_when: multi_test_namespace.rc != 0 and "AlreadyExists" not in multi_test_namespace.stderr
          become: yes

        - name: Deploy two test services
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            cat <<EOF | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: service-a
              namespace: metallb-multi-test
            spec:
              selector:
                matchLabels:
                  app: service-a
              replicas: 1
              template:
                metadata:
                  labels:
                    app: service-a
                spec:
                  containers:
                  - name: nginx
                    image: nginx:stable
                    ports:
                    - containerPort: 80
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: service-a-lb
              namespace: metallb-multi-test
            spec:
              type: LoadBalancer
              ports:
              - port: 80
                targetPort: 80
              selector:
                app: service-a
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: service-b
              namespace: metallb-multi-test
            spec:
              selector:
                matchLabels:
                  app: service-b
              replicas: 1
              template:
                metadata:
                  labels:
                    app: service-b
                spec:
                  containers:
                  - name: nginx
                    image: nginx:stable
                    ports:
                    - containerPort: 80
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: service-b-lb
              namespace: metallb-multi-test
            spec:
              type: LoadBalancer
              ports:
              - port: 80
                targetPort: 80
              selector:
                app: service-b
            EOF
          register: multi_services
          changed_when: false
          become: yes

        - name: Wait for deployments to be ready
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl wait --namespace=metallb-multi-test --for=condition=available deployment/service-a --timeout=60s
            kubectl wait --namespace=metallb-multi-test --for=condition=available deployment/service-b --timeout=60s
          register: multi_ready
          changed_when: false
          ignore_errors: yes
          become: yes

        - name: Get IPs for both services
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl get services -n metallb-multi-test -o wide
          register: multi_ips
          changed_when: false
          become: yes
          when: multi_ready is succeeded

        - name: Check if each service got a unique IP
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            IP_A=$(kubectl get service service-a-lb -n metallb-multi-test -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            IP_B=$(kubectl get service service-b-lb -n metallb-multi-test -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            
            if [ -z "$IP_A" ] || [ -z "$IP_B" ]; then
              echo "One or both services did not get an IP address"
              exit 1
            fi
            
            if [ "$IP_A" = "$IP_B" ]; then
              echo "Services received the same IP: $IP_A"
              exit 1
            else
              echo "Services received different IPs: $IP_A and $IP_B"
              exit 0
            fi
          register: unique_ips
          changed_when: false
          ignore_errors: yes
          become: yes
          when: multi_ready is succeeded

        - name: Display multiple service test results
          debug:
            msg: |
              Service allocation: 
              {{ multi_ips.stdout_lines }}
              Unique IPs: {{ "Yes, services received different IPs" if unique_ips.rc == 0 else "No, services did not receive unique IPs" }}
          when: multi_ready is succeeded

        - name: Cleanup multi-test resources
          shell: |
            export KUBECONFIG=/etc/kubernetes/admin.conf
            kubectl delete namespace metallb-multi-test
          register: multi_cleanup
          changed_when: false
          ignore_errors: yes
          become: yes 